# Individual Classes and Functions 


# First Class: Compatible Parent Genotypes  

class SufficientStat:
    def compatible_mating_haplotypes(self):
        if self.nMarkers == 0:
            return None

        cpg = [None] * self.nMarkers
        for i in range(self.nMarkers):
            cpg[i] = self.enumerate_compatible_mating_genotype(i)

        if self.nMarkers == 1:
            cmh = None
            for i in range(cpg[0].ngt):
                cmh = MatingHaplotype(self.nMarkers, None, None, cmh)
                cmh.h[0][0] = cpg[0].gt[i][0].a[0]
                cmh.h[1][0] = 0 if self.xlink else cpg[0].gt[i][0].a[1]
                cmh.h[2][0] = cpg[0].gt[i][1].a[0]
                cmh.h[3][0] = cpg[0].gt[i][1].a[1]
                cmh.hash_val = cmh.hash()
            for i in range(self.nMarkers):
                if cpg[i]:
                    del cpg[i]
            del cpg
            return cmh

        iteration_counter = 0
        cmh = None
        cmh_last_node = None
        ncmh = 0

        if all(cpg[i].ngt > 0 for i in range(self.nMarkers)):
            idx = [0] * self.nMarkers
            while idx[0] < cpg[0].ngt:
                pg = [None] * 2
                for i in range(2):
                    pg[i] = [None] * self.nMarkers
                    for j in range(self.nMarkers):
                        pg[i][j] = cpg[j].gt[idx[j]][i]

                mh = MatingMmGenotype(self.nMarkers, pg, self.xlink)
                if self.xlink:
                    resolved = mh.resolve_x(self.n_offspring, self.ogt, self.sex)
                else:
                    resolved = mh.resolve(self.n_offspring, self.ogt)

                if resolved:
                    if cmh is None:
                        cmh = mh.enumerate_mating_haplo(self.n_offspring, self.ogt, self.sex, 2 * self.maxcmh)
                        if cmh is not None:
                            ncmh = 1
                            cmh_last_node = cmh
                            while cmh_last_node.next is not None:
                                cmh_last_node = cmh_last_node.next
                                ncmh += 1
                    else:
                        cmh_last_node.next = mh.enumerate_mating_haplo(self.n_offspring, self.ogt, self.sex, self.maxcmh)
                        while cmh_last_node.next is not None:
                            cmh_last_node = cmh_last_node.next
                            ncmh += 1

                if mh is not None:
                    del mh

                if self.maxcmh != 0 and ncmh > 2 * self.maxcmh:
                    break

                j = self.nMarkers - 1
                while j >= 0 and idx[j] + 1 == cpg[j].ngt:
                    idx[j] = 0
                    j -= 1
                if j < 0:
                    break
                idx[j] += 1

                iteration_counter += 1
                if iteration_counter == 1000000 and ncmh == 0:
                    break

            del idx

        return cmh






# Second Class: Haploid



class HaploidTable:
    def maketable(self, hl):
        minp = 0.0001

        if hl is None:
            return

        hl2 = hl
        size = 0
        while hl2 is not None:
            if hl2.p >= minp:
                for i in range(2):
                    if hl2.h[i][0] > 0:  
                        hld = self.find(hl2.h[i])
                        if hld is None:
                            if self.hpl is None:
                                self.hpl = HaploidList(Haploid(hl2.nmrk, hl2.h[i], hl2.p / 2), self.hpl)
                            else:
                                HaploidList(Haploid(hl2.nmrk, hl2.h[i], hl2.p / 2), self.hpl)
                            size += 1
                        else:
                            hld.p += hl2.p / 2
            hl2 = hl2.next








# Third class Haplotype List
class HaplotypeList:
    def __init__(self, n, h1=None, h2=None, nxt=None):
        self.h = [None] * 2
        for i in range(2):
            self.h[i] = [0] * n
        
        if h1 is not None and h2 is not None:
            for i in range(n):
                self.h[0][i] = h1[i]
                self.h[1][i] = h2[i]

        self.nmrk = n
        self.next = nxt
        self.p = 0.0
        self.q = 0.0

    def equal(self, h1, h2):
        for i in range(self.nmrk):
            if not (self.h[0][i] == h1[i] and self.h[1][i] == h2[i]):
                break
        else:
            return True

        for i in range(self.nmrk):
            if not (self.h[0][i] == h2[i] and self.h[1][i] == h1[i]):
                break
        else:
            return True
        
        return False

    def find(self, h1, h2):
        hl = self
        while hl is not None and not hl.equal(h1, h2):
            hl = hl.next
        return hl

    def __del__(self):
        for i in range(2):
            if self.h[i] is not None:
                del self.h[i]
        
        if self.next is not None:
            del self.next




# Class defining Mating Haplotype 
class MatingHaplotype:
    def __init__(self, n, h1=None, h2=None, nxt=None):
        self.nmrks = n
        self.h = [bytearray(n) for _ in range(4)]
        
        for j in range(2):
            for i in range(n):
                self.h[j][i] = h1.h[j][i] if h1 else 0
                self.h[j + 2][i] = h2.h[j][i] if h2 else 0

        self.hash_val = self.hash() if h1 and h2 else 0
        self.pg = [0.0] * 4
        self.pset = 0.0
        self.frq = 0.0
        self.hl = [None, None]
        self.next = nxt

    def hash(self):
        a = [0] * 4

        for i in range(4):
            for j in range(self.nmrks):
                k = self.h[i][j]
                a[i] ^= (k << (j & 8))
            a[i] &= 255

        i = min(a[0], a[1])
        j = min(a[2], a[3])
        if i < j or (i == j and a[0] + a[1] < a[2] + a[3]):
            k = i + ((a[0] + a[1] - i) << 8) + (j << 16) + ((a[2] + a[3] - j) << 24)
        else:
            k = j + ((a[2] + a[3] - j) << 8) + (i << 16) + ((a[0] + a[1] - i) << 24)

        return k

    def len(self):
        i = 0
        mh = self.next
        while mh:
            i += 1
            mh = mh.next

        return i + 1

    def equal(self, mh):
        if mh.hash_val != self.hash_val:
            return False

        conditions = [
            (self.h[0] == mh.h[0] and self.h[1] == mh.h[1]) or
            (self.h[0] == mh.h[1] and self.h[1] == mh.h[0]),
            
            (self.h[2] == mh.h[2] and self.h[3] == mh.h[3]) or
            (self.h[2] == mh.h[3] and self.h[3] == mh.h[2]),
            
            (self.h[0] == mh.h[2] and self.h[1] == mh.h[3]) or
            (self.h[0] == mh.h[3] and self.h[1] == mh.h[2]),
            
            (self.h[2] == mh.h[0] and self.h[3] == mh.h[1]) or
            (self.h[2] == mh.h[1] and self.h[3] == mh.h[0])
        ]

        return all(conditions[:2]) or all(conditions[2:])

    def n_heterozygotes(self):
        n = 0
        for i in range(0, 3, 2):
            j = 0
            while j < self.nmrks and self.h[i][j] == self.h[i + 1][j]:
                j += 1
            if j == self.nmrks:
                n += 1

        return 2 - n

    def __del__(self):
        del self.h
        if self.next:
            del self.next

    def gt_compatible(self, g):
        for i in range(2):
            for j in range(2, 4):
                k = 0
                while k < self.nmrks and (g[k].a[0] == 0 or g[k].equal(self.h[i][k], self.h[j][k])):
                    k += 1
                if k == self.nmrks:
                    return True
        return False

    def unique(self, idx):
        j = 0
        while j < self.nmrks and self.h[idx * 2][j] != kotherallele and self.h[idx * 2 + 1][j] != kotherallele:
            j += 1

        return j == self.nmrks

    def get_p_set(self, cnt, is_observed):
        p = 1.0
        for i in range(4):
            if cnt[i] > 0:
                p *= self.pg[i] ** cnt[i]

        if is_observed:
            self.pset = p

        return p






# Class defining Mating_mm_genotype

class MatingMMGenotype:
    def __init__(self, nmrk, mg, sexlink):
        self.nMarkers = nmrk
        self.xlink = sexlink
        
        self.gt = [None, None]
        self.seg = [None, None]
        
        for i in range(2):
            self.gt[i] = mg[i]
            self.seg[i] = [0] * self.nMarkers
            for j in range(self.nMarkers):
                self.seg[i][j] = 1 if self.gt[i][j].homozygote() else 0  # 1 = homozygote parent
        
        self.next = None

    def og_by_origin_order(self, pg1, pg2, og):
        if og.a[0] == 0:
            return False
        
        if og.homozygote():
            return True
        
        if og.equal(pg1) and og.equal(pg2):
            return False
        
        j = -1  # og.a[j] from pg1
        for i in range(2):
            if pg1.a[0] != og.a[i] and pg1.a[1] != og.a[i]:
                j = 1 - i
                break
            elif pg2.a[0] != og.a[i] and pg2.a[1] != og.a[i]:
                j = i
                break
        
        if j == 1:
            og.swap()
        
        return j >= 0

    def resolve(self, noffs, ogt):
        if self.nMarkers < 2:
            return True
        
        oried = [False] * self.nMarkers
        for i in range(noffs):
            for j in range(self.nMarkers):
                oried[j] = self.og_by_origin_order(self.gt[0][j], self.gt[1][j], ogt[i][j])
            for k in range(2):
                for j in range(self.nMarkers):
                    if oried[j] and self.seg[k][j] != 1:  # informative heterozygotes
                        phase = 0 if self.gt[k][j].a[0] == ogt[i][j].a[k] else 1
                        if self.seg[k][j] > 1 and self.seg[k][j] != i + 2:  # has overlap of heterozygote hap fragment
                            p = self.seg[k][j]
                            for l in range(self.nMarkers):  # combine overlapped hap
                                if self.seg[k][l] == p:
                                    if oried[l] and ogt[i][l].a[k] != self.gt[k][l].a[phase]:  # crossover
                                        return False
                                    if phase == 1:
                                        self.gt[k][l].swap()
                                    self.seg[k][l] = i + 2
                        else:
                            if phase == 1:
                                self.gt[k][j].swap()
                            self.seg[k][j] = i + 2
        
        # Sorting seg numbers, start from 1001 - an arbitrary big number
        for k in range(2):
            for p in range(1001, 1001 + self.nMarkers):
                for i in range(self.nMarkers):
                    if self.seg[k][i] > 1 and self.seg[k][i] < 1000:
                        for l, j in enumerate(self.seg[k]):
                            if j == self.seg[k][i]:
                                self.seg[k][l] = p
                        p += 1
        
        # Bring seg number back starting at 2 for #>1000 (2=1001, 3=1002, etc)
        for k in range(2):
            for i in range(self.nMarkers):
                if self.seg[k][i] > 1000:
                    self.seg[k][i] -= 999
        
        return True

    def resolve_x(self, noffs, ogt, sex):
        if self.nMarkers < 2:
            return True
        
        for k in range(noffs):
            if sex[k] == 2:  # phase ogt[] first
                for i in range(self.nMarkers):
                    if self.gt[0][i].a[0] == ogt[k][i].a[0]:  # here ogt[k][i].a[0] is maternal alleles
                        ogt[k][i].swap()
            for i in range(self.nMarkers):
                if self.seg[1][i] != 1 and self.seg[1][i] != k + 2 and ogt[k][i].a[0] > 0:  # heterozygotes
                    phase = 0 if self.gt[1][i].a[0] == ogt[k][i].a[0] else 1
                    if self.seg[1][i] > 1 and self.seg[1][i] != k + 2:  # has overlap of heterozygote hap fragment
                        j = self.seg[1][i]
                        for l in range(self.nMarkers):  # check consistence of overlapped seg[1] and merge into one segment
                            if self.seg[1][l] == j:
                                if ogt[k][l].a[0] > 0 and self.gt[1][l].a[phase] != ogt[k][l].a[0]:  # inconsistency overlap or crossover happened
                                    return False
                                if phase == 1:
                                    self.gt[1][l].swap()
                                self.seg[1][l] = k + 2
                    else:
                        if phase == 1:
                            self.gt[1][i].swap()
                        self.seg[1][i] = k + 2
        
        # Sorting seg[1] numbers, start from 1001 - an arbitrary big number
        for p in range(1001, 1001 + self.nMarkers):
            for i in range(self.nMarkers):
                if self.seg[1][i] > 1 and self.seg[1][i] < 1000:
                    for l, j in enumerate(self.seg[1]):
                        if j == self.seg[1][i]:
                            self.seg[1][l] = p
                    p += 1
        
        # Bring seg[1] number back starting at 2 for #>1000 (2=1001, 3=1002, etc)
        for i in range(self.nMarkers):
            if self.seg[1][i] > 1000:
                self.seg[1][i] -= 999
        
        return True

    def enumerate_parent_haplotype(self, father):
        kMaxSeg = 15
        
        if father and self.xlink:  # gt[0] already phased
            hl = HaplotypeList(self.nMarkers)
            for i in range(self.nMarkers):
                hl.h[0][i] = self.gt[0][i].a[0]
                hl.h[1][i] = 0
            return hl
        
        if self.nMarkers == 1:  # no need to phase
            hl = HaplotypeList(self.nMarkers)
            hl.h[0][0] = self.gt[0 if father else 1][0].a[0]
            hl.h[1][0] = self.gt[0 if father else 1][0].a[1]
            return hl
        
        genotype = self.gt[0] if father else self.gt[1]
        segment = self.seg[0] if father else self.seg[1]
        
        nseg = sum(1 for i in range(self.nMarkers) if segment[i] == 0)
        maxseg_id = max(segment)
        nseg += maxseg_id - 1
        
        if nseg > kMaxSeg:
            return None
        
        first_het_seg = next(i for i in range(self.nMarkers) if segment[i] == 0)
        segid_off = 3 if first_het_seg < self.nMarkers and segment[first_het_seg] > 0 else 2
        
        old_hl = None
        if nseg > 1:
            for k in range(1 << (nseg - 1)):
                hl = HaplotypeList(self.nMarkers)
                for i in range(first_het_seg):
                    hl.h[0][i] = genotype[i].a[0]
                    hl.h[1][i] = genotype[i].a[1]
                for j in range(maxseg_id - segid_off + 1, nseg):
                    l = (k & (1 << j)) if segment[i] == 0 else (k & (1 << (segment[i] - segid_off)))
                    hl.h[0][i] = genotype[i].a[l]
                    hl.h[1][i] = genotype[i].a[1 - l]
                hl.next = old_hl
                old_hl = hl
        else:
            old_hl = HaplotypeList(self.nMarkers)
            for i in range(self.nMarkers):
                for j in range(2):
                    old_hl.h[j][i] = genotype[i].a[j]
        
        return old_hl

    def compatible_mating_haplotype(self, h1, h2, ogt, sex):
        if h1 is None or h2 is None or ogt is None:
            return False
        
        if self.xlink and sex == 1:
            for j in range(2):
                if all(ogt[k].a[0] == 0 or ogt[k].a[0] == h2.h[j][k] for k in range(self.nMarkers)):
                    return True
        else:
            for i in range(1 if self.xlink else 2):
                for j in range(2):
                    if all(ogt[k].a[0] == 0 or ogt[k].equal(h1.h[i][k], h2.h[j][k]) for k in range(self.nMarkers)):
                        return True
        
        return False

    def enumerate_mating_haplo(self, noffs, ogt, sex, maxmh):
        hl = [self.enumerate_parent_haplotype(True), None]
        
        identical_pgt = not self.xlink and all(self.gt[0][i].equal(self.gt[1][i]) for i in range(self.nMarkers))
        hl[1] = hl[0] if identical_pgt else self.enumerate_parent_haplotype(False)
        
        mh = None
        m = 0
        for h1 in iter(hl[0]):
            for h2 in iter(hl[1] if not identical_pgt else h1):
                if all(self.compatible_mating_haplotype(h1, h2, ogt[i], sex[i]) for i in range(noffs)):
                    mh = MatingHaplotype(self.nMarkers, h1, h2, mh)
                    m += 1
                    if maxmh > 0 and m >= maxmh:
                        break
        
        for hl_item in hl:
            if hl_item:
                del hl_item
        
        return mh

    def __del__(self):
        for i in range(2):
            if self.seg[i]:
                del self.seg[i]
            if self.gt[i]:
                del self.gt[i]
        
        if self.next:
            del self.next


# defining class OFfGenotypePattern

class OffGenotypePattern:
    def __init__(self, count, p, nxt=None):
        self.cnt = count  # cnt[i] = count of offspring with genotype=common_ogt[i]
        self.pg = p
        self.next = nxt

    def __del__(self):
        if self.next:
            del self.next

    def print(self):
        print(f"{self.cnt[0]}\t{self.cnt[1]}\t{self.cnt[2]}\t{self.cnt[3]}\t{self.pg}\t{self.permut_n()}")

    def sum_log_tao(self, n):
        # Function logic needs to be implemented
        pass

    def permut_n(self):
        # Function logic needs to be implemented
        pass

    def permut_n_x(self, sex):
        # Function logic needs to be implemented
        pass

